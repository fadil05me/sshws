#!/usr/bin/python
import socket
import threading
import sys
import select
import getopt

# Listen
LISTENING_ADDR = '0.0.0.0'
LISTENING_PORT = int(sys.argv[1])

# Pass
PASS = ''

# SSH server address
SSH_SERVER_ADDR = '127.0.0.1'
SSH_SERVER_PORT = 22  # Replace this with the actual SSH server port if it's different

# CONST
BUFLEN = 4096 * 4
TIMEOUT = 60
DEFAULT_HOST = '127.0.0.1:22'
RESPONSE = 'HTTP/1.1 101 Switching Protocols\r\n\r\nContent-Length: 104857600000\r\n\r\n'

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.soc = None

    def run(self):
        self.soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.bind((self.host, self.port))
        self.soc.listen(1)
        self.running = True

        while self.running:
            conn, addr = self.soc.accept()
            handshake = conn.recv(1024)
            if handshake.startswith(b"GET"):
                self.handle_websocket_handshake(conn, handshake)
            else:
                conn.close()

    def handle_websocket_handshake(self, conn, handshake):
        # Send HTTP/1.1 101 Switching Protocols
        conn.sendall(RESPONSE.encode())

        # Connect to SSH server
        ssh_conn = socket.create_connection((SSH_SERVER_ADDR, SSH_SERVER_PORT))

        # Now you can forward WebSocket communication to the SSH server
        while True:
            rlist, _, _ = select.select([conn, ssh_conn], [], [])
            for sock in rlist:
                data = sock.recv(BUFLEN)
                if not data:
                    break
                if sock is conn:
                    ssh_conn.sendall(data)
                else:
                    conn.sendall(data)

        conn.close()
        ssh_conn.close()

    def stop(self):
        self.running = False
        self.soc.close()

def print_usage():
    print('Usage: proxy.py -p <port>')
    print('       proxy.py -b <bindAddr> -p <port>')
    print('       proxy.py -b 0.0.0.0 -p 80')

def parse_args(argv):
    global LISTENING_ADDR
    global LISTENING_PORT
    
    try:
        opts, args = getopt.getopt(argv,"hb:p:",["bind=","port="])
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt in ("-b", "--bind"):
            LISTENING_ADDR = arg
        elif opt in ("-p", "--port"):
            LISTENING_PORT = int(arg)


def main(host=LISTENING_ADDR, port=LISTENING_PORT):
    print("\n:-------PythonProxy-------:\n")
    print("Listening addr: " + LISTENING_ADDR)
    print("Listening port: " + str(LISTENING_PORT) + "\n")
    print(":-------------------------:\n")
    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()
    try:
        while True:
            pass
    except KeyboardInterrupt:
        print('Stopping...')
        server.stop()

if __name__ == '__main__':
    main()
